// This file was autogenerated from a .proto file, DO NOT EDIT!

import express, { Response, json, urlencoded } from 'express'
import cors from 'cors'
import * as Types from './types.js'
export type Logger = { log: (v: any) => void, error: (v: any) => void }
export type ServerOptions = {
    allowCors?: true
    staticFiles?: string
    allowNotImplementedMethods?: true
    logger?: Logger
    throwErrors?: true
    overrides?: MethodsOverride
    logMethod?: true
    logBody?: true
    GuestAuthGuard: (authorizationHeader?: string) => Promise<Types.GuestContext>
    UserAuthGuard: (authorizationHeader?: string) => Promise<Types.UserContext>
    AdminAuthGuard: (authorizationHeader?: string) => Promise<Types.AdminContext>
    AppAuthGuard: (authorizationHeader?: string) => Promise<Types.AppContext>
    decryptCallback: (encryptionDeviceId: string, body: any) => Promise<any>
    encryptCallback: (encryptionDeviceId: string, plain: any) => Promise<any>
}
const logErrorAndReturnResponse = (error: Error, response: string, res: Response, logger: Logger) => { logger.error(error.message || error); res.json({ status: 'ERROR', reason: response }) }
export default (methods: Types.ServerMethods, opts: ServerOptions) => {
    const logger = opts.logger || { log: console.log, error: console.error }
    const app = express()
    if (opts.allowCors) {
            app.use(cors())
    }
    app.use(json())
    app.use(urlencoded({ extended: true }))
    if (opts.logMethod) app.use((req, _, next) => { console.log(req.method, req.path);  if (opts.logBody) console.log(req.body); next() })
    const overrides = opts.overrides || {} as MethodsOverride
    if (!opts.allowNotImplementedMethods && !methods.LndGetInfo) throw new Error('method: LndGetInfo is not implemented')
    app.post('/api/admin/lnd/getinfo', async (req, res) => {
        try {
            if (!methods.LndGetInfo) throw new Error('method: LndGetInfo is not implemented')
            const authContext = await opts.AdminAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.LndGetInfoRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.LndGetInfo({ ...authContext, ...query, ...params }, request)
            if (overrides.LndGetInfo_Override) await overrides.LndGetInfo_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AddApp) throw new Error('method: AddApp is not implemented')
    app.post('/api/admin/app/add', async (req, res) => {
        try {
            if (!methods.AddApp) throw new Error('method: AddApp is not implemented')
            const authContext = await opts.AdminAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AddAppRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AddApp({ ...authContext, ...query, ...params }, request)
            if (overrides.AddApp_Override) await overrides.AddApp_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AuthApp) throw new Error('method: AuthApp is not implemented')
    app.post('/api/admin/app/auth', async (req, res) => {
        try {
            if (!methods.AuthApp) throw new Error('method: AuthApp is not implemented')
            const authContext = await opts.AdminAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AuthAppRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AuthApp({ ...authContext, ...query, ...params }, request)
            if (overrides.AuthApp_Override) await overrides.AuthApp_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.Health) throw new Error('method: Health is not implemented')
    app.get('/api/health', async (req, res) => {
        try {
            if (!methods.Health) throw new Error('method: Health is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            await methods.Health({ ...authContext, ...query, ...params })
            if (overrides.Health_Override) await overrides.Health_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.EncryptionExchange) throw new Error('method: EncryptionExchange is not implemented')
    app.post('/api/encryption/exchange', async (req, res) => {
        try {
            if (!methods.EncryptionExchange) throw new Error('method: EncryptionExchange is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.EncryptionExchangeRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.EncryptionExchange({ ...authContext, ...query, ...params }, request)
            if (overrides.EncryptionExchange_Override) await overrides.EncryptionExchange_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.SetMockInvoiceAsPaid) throw new Error('method: SetMockInvoiceAsPaid is not implemented')
    app.post('/api/lnd/mock/invoice/paid', async (req, res) => {
        try {
            if (!methods.SetMockInvoiceAsPaid) throw new Error('method: SetMockInvoiceAsPaid is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.SetMockInvoiceAsPaidRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.SetMockInvoiceAsPaid({ ...authContext, ...query, ...params }, request)
            if (overrides.SetMockInvoiceAsPaid_Override) await overrides.SetMockInvoiceAsPaid_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetLnurlWithdrawInfo) throw new Error('method: GetLnurlWithdrawInfo is not implemented')
    app.get('/api/guest/lnurl_withdraw/info', async (req, res) => {
        try {
            if (!methods.GetLnurlWithdrawInfo) throw new Error('method: GetLnurlWithdrawInfo is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetLnurlWithdrawInfo({ ...authContext, ...query, ...params })
            if (overrides.GetLnurlWithdrawInfo_Override) await overrides.GetLnurlWithdrawInfo_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.HandleLnurlWithdraw) throw new Error('method: HandleLnurlWithdraw is not implemented')
    app.get('/api/guest/lnurl_withdraw/handle', async (req, res) => {
        try {
            if (!methods.HandleLnurlWithdraw) throw new Error('method: HandleLnurlWithdraw is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            await methods.HandleLnurlWithdraw({ ...authContext, ...query, ...params })
            if (overrides.HandleLnurlWithdraw_Override) await overrides.HandleLnurlWithdraw_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetLnurlPayInfo) throw new Error('method: GetLnurlPayInfo is not implemented')
    app.get('/api/guest/lnurl_pay/info', async (req, res) => {
        try {
            if (!methods.GetLnurlPayInfo) throw new Error('method: GetLnurlPayInfo is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetLnurlPayInfo({ ...authContext, ...query, ...params })
            if (overrides.GetLnurlPayInfo_Override) await overrides.GetLnurlPayInfo_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.HandleLnurlPay) throw new Error('method: HandleLnurlPay is not implemented')
    app.get('/api/guest/lnurl_pay/handle', async (req, res) => {
        try {
            if (!methods.HandleLnurlPay) throw new Error('method: HandleLnurlPay is not implemented')
            const authContext = await opts.GuestAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.HandleLnurlPay({ ...authContext, ...query, ...params })
            if (overrides.HandleLnurlPay_Override) await overrides.HandleLnurlPay_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetApp) throw new Error('method: GetApp is not implemented')
    app.post('/api/app/get', async (req, res) => {
        try {
            if (!methods.GetApp) throw new Error('method: GetApp is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetApp({ ...authContext, ...query, ...params })
            if (overrides.GetApp_Override) await overrides.GetApp_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AddAppUser) throw new Error('method: AddAppUser is not implemented')
    app.post('/api/app/user/add', async (req, res) => {
        try {
            if (!methods.AddAppUser) throw new Error('method: AddAppUser is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AddAppUserRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AddAppUser({ ...authContext, ...query, ...params }, request)
            if (overrides.AddAppUser_Override) await overrides.AddAppUser_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AddAppInvoice) throw new Error('method: AddAppInvoice is not implemented')
    app.post('/api/app/add/invoice', async (req, res) => {
        try {
            if (!methods.AddAppInvoice) throw new Error('method: AddAppInvoice is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AddAppInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AddAppInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.AddAppInvoice_Override) await overrides.AddAppInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AddAppUserInvoice) throw new Error('method: AddAppUserInvoice is not implemented')
    app.post('/api/app/user/add/invoice', async (req, res) => {
        try {
            if (!methods.AddAppUserInvoice) throw new Error('method: AddAppUserInvoice is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AddAppUserInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AddAppUserInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.AddAppUserInvoice_Override) await overrides.AddAppUserInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetAppUser) throw new Error('method: GetAppUser is not implemented')
    app.post('/api/app/user/get', async (req, res) => {
        try {
            if (!methods.GetAppUser) throw new Error('method: GetAppUser is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.GetAppUserRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.GetAppUser({ ...authContext, ...query, ...params }, request)
            if (overrides.GetAppUser_Override) await overrides.GetAppUser_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.PayAppUserInvoice) throw new Error('method: PayAppUserInvoice is not implemented')
    app.post('/api/app/invoice/pay', async (req, res) => {
        try {
            if (!methods.PayAppUserInvoice) throw new Error('method: PayAppUserInvoice is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.PayAppUserInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.PayAppUserInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.PayAppUserInvoice_Override) await overrides.PayAppUserInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.SendAppUserToAppUserPayment) throw new Error('method: SendAppUserToAppUserPayment is not implemented')
    app.post('/api/app/user/internal/pay', async (req, res) => {
        try {
            if (!methods.SendAppUserToAppUserPayment) throw new Error('method: SendAppUserToAppUserPayment is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.SendAppUserToAppUserPaymentRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.SendAppUserToAppUserPayment({ ...authContext, ...query, ...params }, request)
            if (overrides.SendAppUserToAppUserPayment_Override) await overrides.SendAppUserToAppUserPayment_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.SendAppUserToAppPayment) throw new Error('method: SendAppUserToAppPayment is not implemented')
    app.post('/api/app/internal/pay', async (req, res) => {
        try {
            if (!methods.SendAppUserToAppPayment) throw new Error('method: SendAppUserToAppPayment is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.SendAppUserToAppPaymentRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.SendAppUserToAppPayment({ ...authContext, ...query, ...params }, request)
            if (overrides.SendAppUserToAppPayment_Override) await overrides.SendAppUserToAppPayment_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetAppUserLNURLInfo) throw new Error('method: GetAppUserLNURLInfo is not implemented')
    app.post('/api/app/user/lnurl/pay/info', async (req, res) => {
        try {
            if (!methods.GetAppUserLNURLInfo) throw new Error('method: GetAppUserLNURLInfo is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.GetAppUserLNURLInfoRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.GetAppUserLNURLInfo({ ...authContext, ...query, ...params }, request)
            if (overrides.GetAppUserLNURLInfo_Override) await overrides.GetAppUserLNURLInfo_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.SetMockAppUserBalance) throw new Error('method: SetMockAppUserBalance is not implemented')
    app.post('/api/app/mock/user/blance/set', async (req, res) => {
        try {
            if (!methods.SetMockAppUserBalance) throw new Error('method: SetMockAppUserBalance is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.SetMockAppUserBalanceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.SetMockAppUserBalance({ ...authContext, ...query, ...params }, request)
            if (overrides.SetMockAppUserBalance_Override) await overrides.SetMockAppUserBalance_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.SetMockAppBalance) throw new Error('method: SetMockAppBalance is not implemented')
    app.post('/api/app/mock/blance/set', async (req, res) => {
        try {
            if (!methods.SetMockAppBalance) throw new Error('method: SetMockAppBalance is not implemented')
            const authContext = await opts.AppAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.SetMockAppBalanceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            await methods.SetMockAppBalance({ ...authContext, ...query, ...params }, request)
            if (overrides.SetMockAppBalance_Override) await overrides.SetMockAppBalance_Override(res); else res.json({status: 'OK'}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetUserInfo) throw new Error('method: GetUserInfo is not implemented')
    app.post('/api/user/info', async (req, res) => {
        try {
            if (!methods.GetUserInfo) throw new Error('method: GetUserInfo is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetUserInfo({ ...authContext, ...query, ...params })
            if (overrides.GetUserInfo_Override) await overrides.GetUserInfo_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.AddProduct) throw new Error('method: AddProduct is not implemented')
    app.post('/api/user/product/add', async (req, res) => {
        try {
            if (!methods.AddProduct) throw new Error('method: AddProduct is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.AddProductRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.AddProduct({ ...authContext, ...query, ...params }, request)
            if (overrides.AddProduct_Override) await overrides.AddProduct_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.NewProductInvoice) throw new Error('method: NewProductInvoice is not implemented')
    app.get('/api/user/product/get/invoice', async (req, res) => {
        try {
            if (!methods.NewProductInvoice) throw new Error('method: NewProductInvoice is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.NewProductInvoice({ ...authContext, ...query, ...params })
            if (overrides.NewProductInvoice_Override) await overrides.NewProductInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetUserOperations) throw new Error('method: GetUserOperations is not implemented')
    app.post('/api/user/operations', async (req, res) => {
        try {
            if (!methods.GetUserOperations) throw new Error('method: GetUserOperations is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.GetUserOperationsRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.GetUserOperations({ ...authContext, ...query, ...params }, request)
            if (overrides.GetUserOperations_Override) await overrides.GetUserOperations_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.NewAddress) throw new Error('method: NewAddress is not implemented')
    app.post('/api/user/chain/new', async (req, res) => {
        try {
            if (!methods.NewAddress) throw new Error('method: NewAddress is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.NewAddressRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.NewAddress({ ...authContext, ...query, ...params }, request)
            if (overrides.NewAddress_Override) await overrides.NewAddress_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.PayAddress) throw new Error('method: PayAddress is not implemented')
    app.post('/api/user/chain/pay', async (req, res) => {
        try {
            if (!methods.PayAddress) throw new Error('method: PayAddress is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.PayAddressRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.PayAddress({ ...authContext, ...query, ...params }, request)
            if (overrides.PayAddress_Override) await overrides.PayAddress_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.NewInvoice) throw new Error('method: NewInvoice is not implemented')
    app.post('/api/user/invoice/new', async (req, res) => {
        try {
            if (!methods.NewInvoice) throw new Error('method: NewInvoice is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.NewInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.NewInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.NewInvoice_Override) await overrides.NewInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.DecodeInvoice) throw new Error('method: DecodeInvoice is not implemented')
    app.post('/api/user/invoice/decode', async (req, res) => {
        try {
            if (!methods.DecodeInvoice) throw new Error('method: DecodeInvoice is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.DecodeInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.DecodeInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.DecodeInvoice_Override) await overrides.DecodeInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.PayInvoice) throw new Error('method: PayInvoice is not implemented')
    app.post('/api/user/invoice/pay', async (req, res) => {
        try {
            if (!methods.PayInvoice) throw new Error('method: PayInvoice is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.PayInvoiceRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.PayInvoice({ ...authContext, ...query, ...params }, request)
            if (overrides.PayInvoice_Override) await overrides.PayInvoice_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.OpenChannel) throw new Error('method: OpenChannel is not implemented')
    app.post('/api/user/open/channel', async (req, res) => {
        try {
            if (!methods.OpenChannel) throw new Error('method: OpenChannel is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const request = req.body
            const error = Types.OpenChannelRequestValidate(request)
            if (error !== null) return logErrorAndReturnResponse(error, 'invalid request body', res, logger)
            const query = req.query
            const params = req.params
            const response = await methods.OpenChannel({ ...authContext, ...query, ...params }, request)
            if (overrides.OpenChannel_Override) await overrides.OpenChannel_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetLnurlWithdrawLink) throw new Error('method: GetLnurlWithdrawLink is not implemented')
    app.get('/api/user/lnurl_withdraw/link', async (req, res) => {
        try {
            if (!methods.GetLnurlWithdrawLink) throw new Error('method: GetLnurlWithdrawLink is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetLnurlWithdrawLink({ ...authContext, ...query, ...params })
            if (overrides.GetLnurlWithdrawLink_Override) await overrides.GetLnurlWithdrawLink_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetLnurlPayLink) throw new Error('method: GetLnurlPayLink is not implemented')
    app.get('/api/user/lnurl_pay/link', async (req, res) => {
        try {
            if (!methods.GetLnurlPayLink) throw new Error('method: GetLnurlPayLink is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetLnurlPayLink({ ...authContext, ...query, ...params })
            if (overrides.GetLnurlPayLink_Override) await overrides.GetLnurlPayLink_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (!opts.allowNotImplementedMethods && !methods.GetLNURLChannelLink) throw new Error('method: GetLNURLChannelLink is not implemented')
    app.post('/api/user/lnurl_channel/url', async (req, res) => {
        try {
            if (!methods.GetLNURLChannelLink) throw new Error('method: GetLNURLChannelLink is not implemented')
            const authContext = await opts.UserAuthGuard(req.headers['authorization'])
            const query = req.query
            const params = req.params
            const response = await methods.GetLNURLChannelLink({ ...authContext, ...query, ...params })
            if (overrides.GetLNURLChannelLink_Override) await overrides.GetLNURLChannelLink_Override(res, response); else res.json({status: 'OK', ...response}) 
        } catch (ex) { const e = ex as any; logErrorAndReturnResponse(e, e.message || e, res, logger); if (opts.throwErrors) throw e }
    })
    if (opts.staticFiles) {
            app.use(express.static(opts.staticFiles))
            app.get('*', function (_, res) {	res.sendFile('index.html', { root: opts.staticFiles })})
    }
    var server: { close: () => void } | undefined
    return {
        Close: () => { if (!server) { throw new Error('tried closing server before starting') } else server.close() },
        Listen: (port: number) => { server = app.listen(port, () => logger.log('Example app listening on port ' + port)) }
    }
}
export type MethodsOverride = {
    LndGetInfo_Override?: (httpRes:Response, handlerRes:Types.LndGetInfoResponse) => Promise<void>
    AddApp_Override?: (httpRes:Response, handlerRes:Types.AuthApp) => Promise<void>
    AuthApp_Override?: (httpRes:Response, handlerRes:Types.AuthApp) => Promise<void>
    Health_Override?: (httpRes:Response) => Promise<void>
    EncryptionExchange_Override?: (httpRes:Response) => Promise<void>
    SetMockInvoiceAsPaid_Override?: (httpRes:Response) => Promise<void>
    GetLnurlWithdrawInfo_Override?: (httpRes:Response, handlerRes:Types.LnurlWithdrawInfoResponse) => Promise<void>
    HandleLnurlWithdraw_Override?: (httpRes:Response) => Promise<void>
    GetLnurlPayInfo_Override?: (httpRes:Response, handlerRes:Types.LnurlPayInfoResponse) => Promise<void>
    HandleLnurlPay_Override?: (httpRes:Response, handlerRes:Types.HandleLnurlPayResponse) => Promise<void>
    GetApp_Override?: (httpRes:Response, handlerRes:Types.Application) => Promise<void>
    AddAppUser_Override?: (httpRes:Response, handlerRes:Types.AppUser) => Promise<void>
    AddAppInvoice_Override?: (httpRes:Response, handlerRes:Types.NewInvoiceResponse) => Promise<void>
    AddAppUserInvoice_Override?: (httpRes:Response, handlerRes:Types.NewInvoiceResponse) => Promise<void>
    GetAppUser_Override?: (httpRes:Response, handlerRes:Types.AppUser) => Promise<void>
    PayAppUserInvoice_Override?: (httpRes:Response, handlerRes:Types.PayInvoiceResponse) => Promise<void>
    SendAppUserToAppUserPayment_Override?: (httpRes:Response) => Promise<void>
    SendAppUserToAppPayment_Override?: (httpRes:Response) => Promise<void>
    GetAppUserLNURLInfo_Override?: (httpRes:Response, handlerRes:Types.LnurlPayInfoResponse) => Promise<void>
    SetMockAppUserBalance_Override?: (httpRes:Response) => Promise<void>
    SetMockAppBalance_Override?: (httpRes:Response) => Promise<void>
    GetUserInfo_Override?: (httpRes:Response, handlerRes:Types.UserInfo) => Promise<void>
    AddProduct_Override?: (httpRes:Response, handlerRes:Types.Product) => Promise<void>
    NewProductInvoice_Override?: (httpRes:Response, handlerRes:Types.NewInvoiceResponse) => Promise<void>
    GetUserOperations_Override?: (httpRes:Response, handlerRes:Types.GetUserOperationsResponse) => Promise<void>
    NewAddress_Override?: (httpRes:Response, handlerRes:Types.NewAddressResponse) => Promise<void>
    PayAddress_Override?: (httpRes:Response, handlerRes:Types.PayAddressResponse) => Promise<void>
    NewInvoice_Override?: (httpRes:Response, handlerRes:Types.NewInvoiceResponse) => Promise<void>
    DecodeInvoice_Override?: (httpRes:Response, handlerRes:Types.DecodeInvoiceResponse) => Promise<void>
    PayInvoice_Override?: (httpRes:Response, handlerRes:Types.PayInvoiceResponse) => Promise<void>
    OpenChannel_Override?: (httpRes:Response, handlerRes:Types.OpenChannelResponse) => Promise<void>
    GetLnurlWithdrawLink_Override?: (httpRes:Response, handlerRes:Types.LnurlLinkResponse) => Promise<void>
    GetLnurlPayLink_Override?: (httpRes:Response, handlerRes:Types.LnurlLinkResponse) => Promise<void>
    GetLNURLChannelLink_Override?: (httpRes:Response, handlerRes:Types.LnurlLinkResponse) => Promise<void>
    GetLiveUserOperations_Override?: (httpRes:Response, handlerRes:Types.LiveUserOperation) => Promise<void>
    GetMigrationUpdate_Override?: (httpRes:Response, handlerRes:Types.MigrationUpdate) => Promise<void>
}
