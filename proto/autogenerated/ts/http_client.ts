// This file was autogenerated from a .proto file, DO NOT EDIT!
import axios from 'axios'
import * as Types from './types'
export type ResultError = { status: 'ERROR', reason: string }

export type ClientParams = {
    baseUrl: string
    retrieveNoAuthAuth: () => Promise<string | null>
    retrieveGuestAuth: () => Promise<string | null>
    retrieveAdminAuth: () => Promise<string | null>
}
export default (params: ClientParams) => ({
    Health: async (): Promise<ResultError | { status: 'OK' }> => {
        const auth = await params.retrieveNoAuthAuth()
        if (auth === null) throw new Error('retrieveNoAuthAuth() returned null')
        const { data } = await axios.get(params.baseUrl + '/health', { headers: { 'authorization': auth } })
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            return data
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    EncryptionExchange: async (request: Types.EncryptionExchangeRequest): Promise<ResultError | { status: 'OK' }> => {
        const auth = await params.retrieveNoAuthAuth()
        if (auth === null) throw new Error('retrieveNoAuthAuth() returned null')
        const { data } = await axios.post(params.baseUrl + '/api/encryption/exchange', request, { headers: { 'authorization': auth } })
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            return data
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    LndGetInfo: async (): Promise<ResultError | { status: 'OK', result: Types.Empty }> => {
        const auth = await params.retrieveNoAuthAuth()
        if (auth === null) throw new Error('retrieveNoAuthAuth() returned null')
        const { data } = await axios.get(params.baseUrl + '/api/lnd/getinfo', { headers: { 'authorization': auth } })
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const error = Types.LndGetInfoResponseValidate(data.result)
            if (error === null) { return data } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
})
