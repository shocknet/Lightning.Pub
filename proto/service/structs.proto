syntax = "proto3";

package structs;

option go_package = "github.com/shocknet/lightning.pub";

message Empty {}


message EncryptionExchangeRequest {
    string publicKey = 1;
    string deviceId = 2;
}

message LndGetInfoRequest {
    int64 nodeId = 1;
}

message SetMockInvoiceAsPaidRequest {
    string invoice = 1;
    int64 amount =2;
}

message LndGetInfoResponse {
    string alias = 1;
}

message AddAppRequest {
    string name = 1;
    bool allow_user_creation = 2;
}

message AuthAppRequest {
    string name = 1;
    optional bool allow_user_creation = 2;
}

message Application {
    string name = 1;
    string id = 2;
    int64 balance = 3;
    string npub = 4;
}

message AuthApp {
    Application app = 1;
    string auth_token = 2;
}


message AddAppUserRequest {
    string identifier = 1;
    bool fail_if_exists = 2;
    int64 balance = 3;
}

message AppUser {
    string identifier = 1;
    UserInfo info = 2;
    int64 max_withdrawable = 3;
}

message AddAppInvoiceRequest {
    string payer_identifier = 1;
    string http_callback_url = 2;
    NewInvoiceRequest invoice_req = 3;
}

message AddAppUserInvoiceRequest {
    string receiver_identifier = 1;
    string payer_identifier = 2;
    string http_callback_url = 3;
    NewInvoiceRequest invoice_req = 4;
}

message GetAppUserRequest {
    string user_identifier = 1;
}

message PayAppUserInvoiceRequest {
    string user_identifier = 1;
    string invoice = 2;
    int64 amount = 3;
}

message PayAppUserInvoiceResponse {
    string preimage = 1;
    int64 amount_paid = 2;
}


message SendAppUserToAppUserPaymentRequest {
    string from_user_identifier = 1;
    string to_user_identifier = 2;
    int64 amount = 3;
}

message SendAppUserToAppPaymentRequest {
    string from_user_identifier = 1;
    int64 amount = 2;
}

message GetAppUserLNURLInfoRequest {
    string user_identifier = 1;
    string base_url_override = 2;
}

message SetMockAppUserBalanceRequest {
    string user_identifier = 1;
    int64 amount = 2;
}

message SetMockAppBalanceRequest {
    int64 amount = 1;
}

enum AddressType {
    WITNESS_PUBKEY_HASH = 0;
    NESTED_PUBKEY_HASH = 1;
    TAPROOT_PUBKEY = 2;
}
message NewAddressRequest {
    AddressType addressType = 1;
}
message NewAddressResponse{
    string address = 1;
}
message PayAddressRequest{
    string address = 1;
    int64 amoutSats = 2;
    int64 satsPerVByte = 3;
}

message PayAddressResponse{
    string txId = 1;
}

message NewInvoiceRequest{
    int64 amountSats = 1;
    string memo = 2;
}

message NewInvoiceResponse{
    string invoice = 1;
}
message DecodeInvoiceRequest{
    string invoice = 1;
}
message DecodeInvoiceResponse{
    int64 amount=1;
}
message PayInvoiceRequest{
    string invoice = 1;
    int64 amount = 2;
}

message PayInvoiceResponse{
    string preimage = 1;
    int64 amount_paid = 2;
}

message OpenChannelRequest{
    string destination = 1;
    int64 fundingAmount = 2;
    int64 pushAmount = 3;
    string closeAddress = 4;
}

message OpenChannelResponse{
    string channelId = 1;
}

message LnurlLinkResponse{
    string lnurl = 1;
    string k1 = 2;
}

message LnurlWithdrawInfoResponse {
    string tag = 1;
    string callback = 2;
    string k1 = 3;
    string defaultDescription = 4;
    int64 minWithdrawable = 5; // millisatoshi - unsafe overflow possible, but very unlikely 
    int64 maxWithdrawable = 6; // millisatoshi - unsafe overflow possible, but very unlikely 
    string balanceCheck = 7;
    string payLink = 8;
}
message LnurlPayInfoResponse {
    string tag = 1;
    string callback = 2;
    int64 maxSendable = 3; // millisatoshi - unsafe overflow possible, but very unlikely 
    int64 minSendable = 4; // millisatoshi - unsafe overflow possible, but very unlikely 
    string metadata = 5;
}
message HandleLnurlPayResponse {
    string pr = 1;
    repeated Empty routes = 2;
}

message UserInfo{
    string userId = 1;
    int64 balance = 2;
}

message GetUserOperationsRequest{
    int64 latestIncomingInvoice = 1;
    int64 latestOutgoingInvoice = 2;
    int64 latestIncomingTx = 3;
    int64 latestOutgoingTx = 4;
    int64 latestIncomingUserToUserPayment = 5;
    int64 latestOutgoingUserToUserPayment = 6;
}
enum UserOperationType {
    INCOMING_TX =0;
    OUTGOING_TX =1;
    INCOMING_INVOICE =2;
    OUTGOING_INVOICE=3;
    OUTGOING_USER_TO_USER=4;
    INCOMING_USER_TO_USER=5;
}

message UserOperation {
    int64 paidAtUnix=1;
    UserOperationType type = 2; 
    bool inbound =3;
    int64 amount = 4;
    string identifier = 5;
}
message UserOperations {
    int64 fromIndex=1;
    int64 toIndex=2;
    repeated UserOperation operations=3;
}
message GetUserOperationsResponse{
    UserOperations latestOutgoingInvoiceOperations=1; 
    UserOperations latestIncomingInvoiceOperations=2;
    UserOperations latestOutgoingTxOperations=3;
    UserOperations latestIncomingTxOperations=4;
    UserOperations latestOutgoingUserToUserPayemnts=5;
    UserOperations latestIncomingUserToUserPayemnts=6 ;
}

message AddProductRequest {
    string name = 1;
    int64 price_sats = 2;
}

message Product {
    string id = 1;
    string name = 2;
    int64 price_sats = 3;
}

message GetProductBuyLinkResponse {
    string link = 1;
}

message LiveUserOperation {
    string id = 1;
    UserOperation operation  = 2;
}