// This file was autogenerated from a .proto file, DO NOT EDIT!

export type ResultError = { status: 'ERROR', reason: string }
export type RequestInfo = { rpcName: string, batch: boolean, nostr: boolean, batchSize: number }
export type RequestStats = { startMs:number, start:bigint, parse: bigint, guard: bigint, validate: bigint, handle: bigint }
export type RequestMetric = AuthContext & RequestInfo & RequestStats & { error?: string }
export type GuestContext = {
}
export type GuestMethodInputs = WizardState_Input | WizardConfig_Input | WizardConfirm_Input
export type GuestMethodOutputs = WizardState_Output | WizardConfig_Output | WizardConfirm_Output
export type AuthContext = GuestContext

export type WizardState_Input = {rpcName:'WizardState'}
export type WizardState_Output = ResultError | ({ status: 'OK' } & StateResponse)

export type WizardConfig_Input = {rpcName:'WizardConfig', req: ConfigRequest}
export type WizardConfig_Output = ResultError | ({ status: 'OK' } & ConfigResponse)

export type WizardConfirm_Input = {rpcName:'WizardConfirm', req: ConfirmRequest}
export type WizardConfirm_Output = ResultError | ({ status: 'OK' } & ConfirmResponse)

export type ServerMethods = {
    WizardState?: (req: WizardState_Input & {ctx: GuestContext }) => Promise<StateResponse>
    WizardConfig?: (req: WizardConfig_Input & {ctx: GuestContext }) => Promise<ConfigResponse>
    WizardConfirm?: (req: WizardConfirm_Input & {ctx: GuestContext }) => Promise<ConfirmResponse>
}


export type OptionsBaseMessage = {
    allOptionalsAreSet?: true
}

export type ConfigResponse = {
    already_initialized: boolean
    seed: string[]
    confirmation_id: string
}
export const ConfigResponseOptionalFields: [] = []
export type ConfigResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    already_initialized_CustomCheck?: (v: boolean) => boolean
    seed_CustomCheck?: (v: string[]) => boolean
    confirmation_id_CustomCheck?: (v: string) => boolean
}
export const ConfigResponseValidate = (o?: ConfigResponse, opts: ConfigResponseOptions = {}, path: string = 'ConfigResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.already_initialized !== 'boolean') return new Error(`${path}.already_initialized: is not a boolean`)
    if (opts.already_initialized_CustomCheck && !opts.already_initialized_CustomCheck(o.already_initialized)) return new Error(`${path}.already_initialized: custom check failed`)

    if (!Array.isArray(o.seed)) return new Error(`${path}.seed: is not an array`)
    for (let index = 0; index < o.seed.length; index++) {
        if (typeof o.seed[index] !== 'string') return new Error(`${path}.seed[${index}]: is not a string`)
    }
    if (opts.seed_CustomCheck && !opts.seed_CustomCheck(o.seed)) return new Error(`${path}.seed: custom check failed`)

    if (typeof o.confirmation_id !== 'string') return new Error(`${path}.confirmation_id: is not a string`)
    if (opts.confirmation_id_CustomCheck && !opts.confirmation_id_CustomCheck(o.confirmation_id)) return new Error(`${path}.confirmation_id: custom check failed`)

    return null
}

export type ConfirmRequest = {
    confirmation_id: string
}
export const ConfirmRequestOptionalFields: [] = []
export type ConfirmRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    confirmation_id_CustomCheck?: (v: string) => boolean
}
export const ConfirmRequestValidate = (o?: ConfirmRequest, opts: ConfirmRequestOptions = {}, path: string = 'ConfirmRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.confirmation_id !== 'string') return new Error(`${path}.confirmation_id: is not a string`)
    if (opts.confirmation_id_CustomCheck && !opts.confirmation_id_CustomCheck(o.confirmation_id)) return new Error(`${path}.confirmation_id: custom check failed`)

    return null
}

export type ConfirmResponse = {
    admin_key: string
}
export const ConfirmResponseOptionalFields: [] = []
export type ConfirmResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    admin_key_CustomCheck?: (v: string) => boolean
}
export const ConfirmResponseValidate = (o?: ConfirmResponse, opts: ConfirmResponseOptions = {}, path: string = 'ConfirmResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.admin_key !== 'string') return new Error(`${path}.admin_key: is not a string`)
    if (opts.admin_key_CustomCheck && !opts.admin_key_CustomCheck(o.admin_key)) return new Error(`${path}.admin_key: custom check failed`)

    return null
}

export type Empty = {
}
export const EmptyOptionalFields: [] = []
export type EmptyOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
}
export const EmptyValidate = (o?: Empty, opts: EmptyOptions = {}, path: string = 'Empty::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    return null
}

export type StateResponse = {
    already_initialized: boolean
}
export const StateResponseOptionalFields: [] = []
export type StateResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    already_initialized_CustomCheck?: (v: boolean) => boolean
}
export const StateResponseValidate = (o?: StateResponse, opts: StateResponseOptions = {}, path: string = 'StateResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.already_initialized !== 'boolean') return new Error(`${path}.already_initialized: is not a boolean`)
    if (opts.already_initialized_CustomCheck && !opts.already_initialized_CustomCheck(o.already_initialized)) return new Error(`${path}.already_initialized: custom check failed`)

    return null
}

export type ConfigRequest = {
    source_name: string
    relay_url: string
    automate_liquidity: boolean
    push_backups_to_nostr: boolean
}
export const ConfigRequestOptionalFields: [] = []
export type ConfigRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    source_name_CustomCheck?: (v: string) => boolean
    relay_url_CustomCheck?: (v: string) => boolean
    automate_liquidity_CustomCheck?: (v: boolean) => boolean
    push_backups_to_nostr_CustomCheck?: (v: boolean) => boolean
}
export const ConfigRequestValidate = (o?: ConfigRequest, opts: ConfigRequestOptions = {}, path: string = 'ConfigRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.source_name !== 'string') return new Error(`${path}.source_name: is not a string`)
    if (opts.source_name_CustomCheck && !opts.source_name_CustomCheck(o.source_name)) return new Error(`${path}.source_name: custom check failed`)

    if (typeof o.relay_url !== 'string') return new Error(`${path}.relay_url: is not a string`)
    if (opts.relay_url_CustomCheck && !opts.relay_url_CustomCheck(o.relay_url)) return new Error(`${path}.relay_url: custom check failed`)

    if (typeof o.automate_liquidity !== 'boolean') return new Error(`${path}.automate_liquidity: is not a boolean`)
    if (opts.automate_liquidity_CustomCheck && !opts.automate_liquidity_CustomCheck(o.automate_liquidity)) return new Error(`${path}.automate_liquidity: custom check failed`)

    if (typeof o.push_backups_to_nostr !== 'boolean') return new Error(`${path}.push_backups_to_nostr: is not a boolean`)
    if (opts.push_backups_to_nostr_CustomCheck && !opts.push_backups_to_nostr_CustomCheck(o.push_backups_to_nostr)) return new Error(`${path}.push_backups_to_nostr: custom check failed`)

    return null
}

