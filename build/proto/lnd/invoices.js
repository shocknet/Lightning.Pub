"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invoices = exports.SubscribeSingleInvoiceRequest = exports.SettleInvoiceResp = exports.SettleInvoiceMsg = exports.AddHoldInvoiceResp = exports.AddHoldInvoiceRequest = exports.CancelInvoiceResp = exports.CancelInvoiceMsg = void 0;
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "invoices.proto" (package "invoicesrpc", syntax proto3)
// tslint:disable
const rpc_1 = require("./rpc");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const rpc_2 = require("./rpc");
// @generated message type with reflection information, may provide speed optimized methods
class CancelInvoiceMsg$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.CancelInvoiceMsg", [
            { no: 1, name: "payment_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { paymentHash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes payment_hash */ 1:
                    message.paymentHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes payment_hash = 1; */
        if (message.paymentHash.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.paymentHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.CancelInvoiceMsg
 */
exports.CancelInvoiceMsg = new CancelInvoiceMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelInvoiceResp$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.CancelInvoiceResp", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.CancelInvoiceResp
 */
exports.CancelInvoiceResp = new CancelInvoiceResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddHoldInvoiceRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.AddHoldInvoiceRequest", [
            { no: 1, name: "memo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 10, name: "value_msat", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "description_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "expiry", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "fallback_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cltv_expiry", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 8, name: "route_hints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => rpc_2.RouteHint },
            { no: 9, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { memo: "", hash: new Uint8Array(0), value: "0", valueMsat: "0", descriptionHash: new Uint8Array(0), expiry: "0", fallbackAddr: "", cltvExpiry: "0", routeHints: [], private: false };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string memo */ 1:
                    message.memo = reader.string();
                    break;
                case /* bytes hash */ 2:
                    message.hash = reader.bytes();
                    break;
                case /* int64 value */ 3:
                    message.value = reader.int64().toString();
                    break;
                case /* int64 value_msat */ 10:
                    message.valueMsat = reader.int64().toString();
                    break;
                case /* bytes description_hash */ 4:
                    message.descriptionHash = reader.bytes();
                    break;
                case /* int64 expiry */ 5:
                    message.expiry = reader.int64().toString();
                    break;
                case /* string fallback_addr */ 6:
                    message.fallbackAddr = reader.string();
                    break;
                case /* uint64 cltv_expiry */ 7:
                    message.cltvExpiry = reader.uint64().toString();
                    break;
                case /* repeated lnrpc.RouteHint route_hints */ 8:
                    message.routeHints.push(rpc_2.RouteHint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool private */ 9:
                    message.private = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string memo = 1; */
        if (message.memo !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.memo);
        /* bytes hash = 2; */
        if (message.hash.length)
            writer.tag(2, runtime_1.WireType.LengthDelimited).bytes(message.hash);
        /* int64 value = 3; */
        if (message.value !== "0")
            writer.tag(3, runtime_1.WireType.Varint).int64(message.value);
        /* int64 value_msat = 10; */
        if (message.valueMsat !== "0")
            writer.tag(10, runtime_1.WireType.Varint).int64(message.valueMsat);
        /* bytes description_hash = 4; */
        if (message.descriptionHash.length)
            writer.tag(4, runtime_1.WireType.LengthDelimited).bytes(message.descriptionHash);
        /* int64 expiry = 5; */
        if (message.expiry !== "0")
            writer.tag(5, runtime_1.WireType.Varint).int64(message.expiry);
        /* string fallback_addr = 6; */
        if (message.fallbackAddr !== "")
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.fallbackAddr);
        /* uint64 cltv_expiry = 7; */
        if (message.cltvExpiry !== "0")
            writer.tag(7, runtime_1.WireType.Varint).uint64(message.cltvExpiry);
        /* repeated lnrpc.RouteHint route_hints = 8; */
        for (let i = 0; i < message.routeHints.length; i++)
            rpc_2.RouteHint.internalBinaryWrite(message.routeHints[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* bool private = 9; */
        if (message.private !== false)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.private);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.AddHoldInvoiceRequest
 */
exports.AddHoldInvoiceRequest = new AddHoldInvoiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddHoldInvoiceResp$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.AddHoldInvoiceResp", [
            { no: 1, name: "payment_request", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { paymentRequest: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payment_request */ 1:
                    message.paymentRequest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string payment_request = 1; */
        if (message.paymentRequest !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.paymentRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.AddHoldInvoiceResp
 */
exports.AddHoldInvoiceResp = new AddHoldInvoiceResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettleInvoiceMsg$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.SettleInvoiceMsg", [
            { no: 1, name: "preimage", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { preimage: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes preimage */ 1:
                    message.preimage = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes preimage = 1; */
        if (message.preimage.length)
            writer.tag(1, runtime_1.WireType.LengthDelimited).bytes(message.preimage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.SettleInvoiceMsg
 */
exports.SettleInvoiceMsg = new SettleInvoiceMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SettleInvoiceResp$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.SettleInvoiceResp", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.SettleInvoiceResp
 */
exports.SettleInvoiceResp = new SettleInvoiceResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeSingleInvoiceRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("invoicesrpc.SubscribeSingleInvoiceRequest", [
            { no: 2, name: "r_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { rHash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes r_hash */ 2:
                    message.rHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes r_hash = 2; */
        if (message.rHash.length)
            writer.tag(2, runtime_1.WireType.LengthDelimited).bytes(message.rHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message invoicesrpc.SubscribeSingleInvoiceRequest
 */
exports.SubscribeSingleInvoiceRequest = new SubscribeSingleInvoiceRequest$Type();
/**
 * @generated ServiceType for protobuf service invoicesrpc.Invoices
 */
exports.Invoices = new runtime_rpc_1.ServiceType("invoicesrpc.Invoices", [
    { name: "SubscribeSingleInvoice", serverStreaming: true, options: {}, I: exports.SubscribeSingleInvoiceRequest, O: rpc_1.Invoice },
    { name: "CancelInvoice", options: {}, I: exports.CancelInvoiceMsg, O: exports.CancelInvoiceResp },
    { name: "AddHoldInvoice", options: {}, I: exports.AddHoldInvoiceRequest, O: exports.AddHoldInvoiceResp },
    { name: "SettleInvoice", options: {}, I: exports.SettleInvoiceMsg, O: exports.SettleInvoiceResp }
]);
//# sourceMappingURL=invoices.js.map