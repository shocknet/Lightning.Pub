"use strict";
// This file was autogenerated from a .proto file, DO NOT EDIT!
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Types = __importStar(require("./types"));
const logErrorAndReturnResponse = (error, response, res, logger) => { logger.error(error.message || error); res.json({ status: 'ERROR', reason: response }); };
exports.default = (methods, opts) => {
    const logger = opts.logger || { log: console.log, error: console.error };
    const app = (0, express_1.default)();
    if (!opts.allowNotImplementedMethods && !methods.Health)
        throw new Error('method: Health is not implemented');
    app.get('/health', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!methods.Health)
                throw new Error('method: Health is not implemented');
            const authContext = yield opts.NoAuthAuthGuard(req.headers['authorization']);
            const query = req.query;
            const params = req.params;
            yield methods.Health(Object.assign(Object.assign(Object.assign({}, authContext), query), params));
            res.json({ status: 'OK' });
        }
        catch (ex) {
            const e = ex;
            logErrorAndReturnResponse(e, e.message || e, res, logger);
            if (opts.throwErrors)
                throw e;
        }
    }));
    if (!opts.allowNotImplementedMethods && !methods.EncryptionExchange)
        throw new Error('method: EncryptionExchange is not implemented');
    app.post('/api/encryption/exchange', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!methods.EncryptionExchange)
                throw new Error('method: EncryptionExchange is not implemented');
            const authContext = yield opts.NoAuthAuthGuard(req.headers['authorization']);
            const request = req.body;
            const error = Types.EncryptionExchangeRequestValidate(request);
            if (error !== null)
                return logErrorAndReturnResponse(error, 'invalid request body', res, logger);
            const query = req.query;
            const params = req.params;
            yield methods.EncryptionExchange(Object.assign(Object.assign(Object.assign({}, authContext), query), params), request);
            res.json({ status: 'OK' });
        }
        catch (ex) {
            const e = ex;
            logErrorAndReturnResponse(e, e.message || e, res, logger);
            if (opts.throwErrors)
                throw e;
        }
    }));
    if (!opts.allowNotImplementedMethods && !methods.LndGetInfo)
        throw new Error('method: LndGetInfo is not implemented');
    app.get('/api/lnd/getinfo', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!methods.LndGetInfo)
                throw new Error('method: LndGetInfo is not implemented');
            const authContext = yield opts.NoAuthAuthGuard(req.headers['authorization']);
            const query = req.query;
            const params = req.params;
            const response = yield methods.LndGetInfo(Object.assign(Object.assign(Object.assign({}, authContext), query), params));
            res.json({ status: 'OK', result: response });
        }
        catch (ex) {
            const e = ex;
            logErrorAndReturnResponse(e, e.message || e, res, logger);
            if (opts.throwErrors)
                throw e;
        }
    }));
    var server;
    return {
        Close: () => { if (!server) {
            throw new Error('tried closing server before starting');
        }
        else
            server.close(); },
        Listen: (port) => { server = app.listen(port, () => logger.log('Example app listening on port ' + port)); }
    };
};
//# sourceMappingURL=express_server.js.map