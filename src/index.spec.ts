import 'dotenv/config' // TODO - test env
import { AfterAll, BeforeAll, expect, FTest, Test, TestSuite } from 'testyts';
import NewServer from '../proto/autogenerated/ts/express_server'
import NewClient from '../proto/autogenerated/ts/http_client'
import methods from './services/serverMethods';
import serverOptions from './auth';
import GetServerMethods from './services/serverMethods'
import Main, { LoadMainSettingsFromEnv } from './services/main'
import * as Types from '../proto/autogenerated/ts/types';
const testPort = 4000

@TestSuite()
export class ServerTestSuite {
    userAuthHeader = ""
    client = NewClient({
        baseUrl: `http://localhost:${testPort}`,
        retrieveAdminAuth: async () => (""),
        retrieveGuestAuth: async () => (""),
        retrieveUserAuth: async () => this.userAuthHeader,
        decryptCallback: async (b) => b,
        encryptCallback: async (b) => b,
        deviceId: "device0"
    })
    mainHandler = new Main(LoadMainSettingsFromEnv()) // TODO - test env file
    server = NewServer(GetServerMethods(this.mainHandler), { ...serverOptions(this.mainHandler), throwErrors: true })


    @BeforeAll()
    async startServer() {
        await this.mainHandler.storage.Connect()
        this.server.Listen(testPort)
    }
    @AfterAll()
    stopServer() {
        this.server.Close()
    }
    @Test()
    async health() {
        await this.client.Health()
    }

    @Test()
    async getInfo() {
        console.log(await this.client.LndGetInfo({ node_id: 0 }))
    }
    @Test()
    async createUser() {
        const res = await this.client.AddUser({ name: "test", callback_url: "http://...", secret: "shhhhhht" })
        if (res.status === 'ERROR') throw new Error(res.reason)
        console.log(res.result)
        const user = await this.mainHandler.storage.GetUser(res.result.user_id)
        console.log(user)
        this.userAuthHeader = res.result.auth_token
    }
    @Test()
    async newAddress() {
        console.log(await this.client.NewAddress({ address_type: Types.AddressType.WITNESS_PUBKEY_HASH }))
    }
}