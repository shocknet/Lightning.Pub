// @ts-ignore
import BitcoinCore from 'bitcoin-core';
import { LoadTestSettingsFromEnv, TestSettings } from "../services/main/settings.js"
import LND from '../services/lnd/lnd.js'
import { AddressType } from '../../proto/autogenerated/ts/types.js';
// dave <--> alice <--> carol <--> bob
export const setupNetwork = async () => {
    const settings = LoadTestSettingsFromEnv()
    const core = new Core(settings)
    await core.Init()
    const { alice, bob, carol, dave } = await initLndInstances(settings)
    /*const aliceAddr = await alice.NewAddress(AddressType.WITNESS_PUBKEY_HASH, true)
    const bobAddr = await bob.NewAddress(AddressType.WITNESS_PUBKEY_HASH)
    const carolAddr = await carol.NewAddress(AddressType.WITNESS_PUBKEY_HASH)
    const daveAddr = await dave.NewAddress(AddressType.WITNESS_PUBKEY_HASH)
    await core.SendToAddress(aliceAddr.address, 10)
    await core.SendToAddress(bobAddr.address, 10)
    await core.SendToAddress(carolAddr.address, 10)
    await core.SendToAddress(daveAddr.address, 10)
    await core.Mine(6)*/
    const alicePub = await alice.GetInfo()
    const [pubkey, host] = alicePub.uris[0].split('@')
    await carol.ConnectPeer(pubkey, host)
    console.log(await alice.GetInfo())
    console.log(await carol.GetInfo())
    const aliceAddr = await alice.NewAddress(AddressType.WITNESS_PUBKEY_HASH, true)
    console.log({ aliceAddr })
}

const initLndInstances = async (settings: TestSettings) => {
    const alice = new LND(settings.lndSettings, console.log, console.log, () => { }, () => { })
    await alice.Warmup()

    const bobSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.otherNode }
    const bob = new LND(bobSettings, console.log, console.log, () => { }, () => { })
    await bob.Warmup()

    const carolSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.thirdNode }
    const carol = new LND(carolSettings, console.log, console.log, () => { }, () => { })
    await carol.Warmup()

    const daveSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.fourthNode }
    const dave = new LND(daveSettings, console.log, console.log, () => { }, () => { })
    await dave.Warmup()
    return { alice, bob, carol, dave }
}
class Core {
    core: BitcoinCore
    addr: { address: string }
    constructor(settings: TestSettings) {
        this.core = new BitcoinCore({
            //network: 'regtest',
            host: '127.0.0.1',
            port: `${settings.bitcoinCoreSettings.port}`,
            username: settings.bitcoinCoreSettings.user,
            password: settings.bitcoinCoreSettings.pass,
            // use a long timeout due to the time it takes to mine a lot of blocks
            timeout: 5 * 60 * 1000,
        })
    }

    Init = async () => {
        const wallet = await this.core.createWallet('');
        console.log({ wallet })
        this.addr = await this.core.getNewAddress()
        console.log({ addr: this.addr })
        await this.Mine(101)
        const info = await this.core.getWalletInfo();
        console.log({ info })
    }

    Mine = async (blocks: number) => {
        await this.core.generateToAddress(blocks, this.addr)
    }

    SendToAddress = async (address: string, amount: number) => {
        const tx = await this.core.sendToAddress(address, amount)
        console.log({ tx })
    }
}
