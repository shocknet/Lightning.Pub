
import { LoadTestSettingsFromEnv, TestSettings } from "../services/main/settings.js"
import LND from '../services/lnd/lnd.js'
import { AddressType } from '../../proto/autogenerated/ts/types.js';
import { BitcoinCoreWrapper } from "./bitcoinCore.js";
// dave <--> alice <--> carol <--> bob
type LndInstances = { alice: LND; bob: LND; carol: LND; dave: LND; }
type Addresses = { alice: string, bob: string, carol: string, dave: string }
type InstanceInfo = { pubkey: string; host: string; }
type InstancesInfo = { alice: InstanceInfo; bob: InstanceInfo; carol: InstanceInfo; dave: InstanceInfo; }
export const setupNetwork = async () => {
    const settings = LoadTestSettingsFromEnv()
    const core = new BitcoinCoreWrapper(settings)
    await core.Init()
    const instances = await initLndInstances(settings)
    const { alice, bob, carol, dave } = instances
    const connectInfo = await getConnectInfo(instances)
    await bob.ConnectPeer(connectInfo.carol)
    await carol.ConnectPeer(connectInfo.alice)
    await alice.ConnectPeer(connectInfo.dave)
    console.log("done connecting peer, sending coins")

    const addresses = await getAddresses(instances)
    await sendCoinsToAddresses(core, addresses)
    console.log("done sending coins, opening channels")
    await new Promise((resolve) => setTimeout(resolve, 2000))
    console.log(await getAllInfo(instances))
    console.log(await getAllBalances(instances))
    await openChannels(instances, connectInfo, addresses)
    await core.Mine(6)
    console.log("done opening channels, sending balancing payment")
    await sendBalancingPayment(instances)
    stopAllInstances(instances)
    console.log("network setup complete, starting tests")
}

const sendBalancingPayment = async (instances: LndInstances) => {
    const invoice = await instances.dave.NewInvoice(2_000_000, "balancing payment", 3600)
    await instances.bob.PayInvoice(invoice.payRequest, 0, 1000)
}

const openChannels = async (instances: LndInstances, info: InstancesInfo, addresses: Addresses) => {
    await instances.bob.OpenChannel(info.carol.pubkey, addresses.bob, 5_000_000, 0)
    await instances.carol.OpenChannel(info.alice.pubkey, addresses.carol, 5_000_000, 0)
    await instances.alice.OpenChannel(info.dave.pubkey, addresses.alice, 5_000_000, 0)

}

const sendCoinsToAddresses = async (core: BitcoinCoreWrapper, addresses: Addresses) => {
    await core.SendToAddress(addresses.alice, 10)
    await core.SendToAddress(addresses.bob, 10)
    await core.SendToAddress(addresses.carol, 10)
    await core.SendToAddress(addresses.dave, 10)
    await core.Mine(6)
}

const getAddresses = async (instances: LndInstances): Promise<Addresses> => {
    const alice = (await instances.alice.NewAddress(AddressType.WITNESS_PUBKEY_HASH)).address
    const bob = (await instances.bob.NewAddress(AddressType.WITNESS_PUBKEY_HASH)).address
    const carol = (await instances.carol.NewAddress(AddressType.WITNESS_PUBKEY_HASH)).address
    const dave = (await instances.dave.NewAddress(AddressType.WITNESS_PUBKEY_HASH)).address
    return { alice, bob, carol, dave }
}

const getAllInfo = async (instances: LndInstances) => {
    const aliceInfo = await instances.alice.GetInfo()
    const bobInfo = await instances.bob.GetInfo()
    const carolInfo = await instances.carol.GetInfo()
    const daveInfo = await instances.dave.GetInfo()
    return { aliceInfo, bobInfo, carolInfo, daveInfo }

}

const getAllBalances = async (instances: LndInstances) => {
    const aliceBal = await instances.alice.GetBalance()
    const bobBal = await instances.bob.GetBalance()
    const carolBal = await instances.carol.GetBalance()
    const daveBal = await instances.dave.GetBalance()
    return { aliceBal, bobBal, carolBal, daveBal }

}

const getConnectInfo = async (instances: LndInstances) => {
    const { aliceInfo, bobInfo, carolInfo, daveInfo } = await getAllInfo(instances)
    const [alicePub, aliceHost] = aliceInfo.uris[0].split('@')
    const alice = { pubkey: alicePub, host: aliceHost }

    const [bobPub, bobHost] = bobInfo.uris[0].split('@')
    const bob = { pubkey: bobPub, host: bobHost }

    const [carolPub, carolHost] = carolInfo.uris[0].split('@')
    const carol = { pubkey: carolPub, host: carolHost }

    const [davePub, daveHost] = daveInfo.uris[0].split('@')
    const dave = { pubkey: davePub, host: daveHost }

    return { alice, bob, carol, dave }
}

const initLndInstances = async (settings: TestSettings): Promise<LndInstances> => {
    const alice = new LND(settings.lndSettings, console.log, console.log, () => { }, () => { })
    await alice.Warmup()

    const bobSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.otherNode }
    const bob = new LND(bobSettings, console.log, console.log, () => { }, () => { })
    await bob.Warmup()

    const carolSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.thirdNode }
    const carol = new LND(carolSettings, console.log, console.log, () => { }, () => { })
    await carol.Warmup()

    const daveSettings = { ...settings.lndSettings, mainNode: settings.lndSettings.fourthNode }
    const dave = new LND(daveSettings, console.log, console.log, () => { }, () => { })
    await dave.Warmup()
    return { alice, bob, carol, dave }
}

const stopAllInstances = (instances: LndInstances) => {
    instances.alice.Stop()
    instances.bob.Stop()
    instances.carol.Stop()
    instances.dave.Stop()
}
