import 'dotenv/config'
import NewServer from '../proto/autogenerated/ts/express_server.js'
import GetServerMethods from './services/serverMethods/index.js'
import serverOptions from './auth.js';
import nostrMiddleware from './nostrMiddleware.js'
import { getLogger } from './services/helpers/logger.js';
import { initMainHandler, initSettings } from './services/main/init.js';
import { nip19 } from 'nostr-tools'
import { LoadStorageSettingsFromEnv } from './services/storage/index.js';
//@ts-ignore
const { nprofileEncode } = nip19

const start = async () => {
    const log = getLogger({})
    const storageSettings = LoadStorageSettingsFromEnv()
    const settingsManager = await initSettings(log, storageSettings)
    const keepOn = await initMainHandler(log, settingsManager)
    if (!keepOn) {
        log("manual process ended")
        return
    }

    const { apps, mainHandler, liquidityProviderInfo, wizard, adminManager } = keepOn
    const serverMethods = GetServerMethods(mainHandler)
    const nostrSettings = settingsManager.getSettings().nostrRelaySettings
    log("initializing nostr middleware")
    const { Send } = nostrMiddleware(serverMethods, mainHandler,
        { ...nostrSettings, apps, clients: [liquidityProviderInfo] },
        (e, p) => mainHandler.liquidityProvider.onEvent(e, p)
    )
    log("starting server")
    mainHandler.attachNostrSend(Send)
    mainHandler.StartBeacons()
    const appNprofile = nprofileEncode({ pubkey: liquidityProviderInfo.publicKey, relays: nostrSettings.relays })
    if (wizard) {
        wizard.AddConnectInfo(appNprofile, nostrSettings.relays)
    }
    adminManager.setAppNprofile(appNprofile)
    const Server = NewServer(serverMethods, serverOptions(mainHandler))
    Server.Listen(settingsManager.getSettings().serviceSettings.servicePort)
}
start()
