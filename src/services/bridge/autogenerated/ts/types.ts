// This file was autogenerated from a .proto file, DO NOT EDIT!

export type ResultError = { status: 'ERROR', reason: string }
export type RequestInfo = { rpcName: string, batch: boolean, nostr: boolean, batchSize: number }
export type RequestStats = { startMs:number, start:bigint, parse: bigint, guard: bigint, validate: bigint, handle: bigint }
export type RequestMetric = AuthContext & RequestInfo & RequestStats & { error?: string }
export type GuestContext = {
}

export type WalletContext = {
    wallet_token: string
}
export type WalletMethodInputs = WalletGetVanityName_Input
export type WalletMethodOutputs = WalletGetVanityName_Output
export type PubContext = {
    pub_secret: string
}
export type PubMethodInputs = PubNewmapping_Input
export type PubMethodOutputs = PubNewmapping_Output
export type AuthContext = GuestContext | WalletContext | PubContext

export type PubNewmapping_Input = {rpcName:'PubNewmapping', req: PubNewMappingRequest}
export type PubNewmapping_Output = ResultError | { status: 'OK' }

export type WalletGetVanityName_Input = {rpcName:'WalletGetVanityName', req: WalletGetVanityNameRequest}
export type WalletGetVanityName_Output = ResultError | ({ status: 'OK' } & WalletGetVanityNameResponse)

export type ServerMethods = {
    PubNewmapping?: (req: PubNewmapping_Input & {ctx: PubContext }) => Promise<void>
    WalletGetVanityName?: (req: WalletGetVanityName_Input & {ctx: WalletContext }) => Promise<WalletGetVanityNameResponse>
}


export type OptionsBaseMessage = {
    allOptionalsAreSet?: true
}

export type WalletGetVanityNameRequest = {
    user_id: string
}
export const WalletGetVanityNameRequestOptionalFields: [] = []
export type WalletGetVanityNameRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    user_id_CustomCheck?: (v: string) => boolean
}
export const WalletGetVanityNameRequestValidate = (o?: WalletGetVanityNameRequest, opts: WalletGetVanityNameRequestOptions = {}, path: string = 'WalletGetVanityNameRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.user_id !== 'string') return new Error(`${path}.user_id: is not a string`)
    if (opts.user_id_CustomCheck && !opts.user_id_CustomCheck(o.user_id)) return new Error(`${path}.user_id: custom check failed`)

    return null
}

export type WalletGetVanityNameResponse = {
    vanity_name: string
}
export const WalletGetVanityNameResponseOptionalFields: [] = []
export type WalletGetVanityNameResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    vanity_name_CustomCheck?: (v: string) => boolean
}
export const WalletGetVanityNameResponseValidate = (o?: WalletGetVanityNameResponse, opts: WalletGetVanityNameResponseOptions = {}, path: string = 'WalletGetVanityNameResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.vanity_name !== 'string') return new Error(`${path}.vanity_name: is not a string`)
    if (opts.vanity_name_CustomCheck && !opts.vanity_name_CustomCheck(o.vanity_name)) return new Error(`${path}.vanity_name: custom check failed`)

    return null
}

export type Empty = {
}
export const EmptyOptionalFields: [] = []
export type EmptyOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
}
export const EmptyValidate = (o?: Empty, opts: EmptyOptions = {}, path: string = 'Empty::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    return null
}

export type PubNewMappingRequest = {
    user_id: string
}
export const PubNewMappingRequestOptionalFields: [] = []
export type PubNewMappingRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    user_id_CustomCheck?: (v: string) => boolean
}
export const PubNewMappingRequestValidate = (o?: PubNewMappingRequest, opts: PubNewMappingRequestOptions = {}, path: string = 'PubNewMappingRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.user_id !== 'string') return new Error(`${path}.user_id: is not a string`)
    if (opts.user_id_CustomCheck && !opts.user_id_CustomCheck(o.user_id)) return new Error(`${path}.user_id: custom check failed`)

    return null
}

