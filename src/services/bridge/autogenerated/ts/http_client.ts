// This file was autogenerated from a .proto file, DO NOT EDIT!
import axios from 'axios'
import * as Types from './types.js'
export type ResultError = { status: 'ERROR', reason: string }

export type ClientParams = {
    baseUrl: string
    retrieveGuestAuth: () => Promise<string | null>
    retrieveWalletAuth: () => Promise<string | null>
    retrievePubAuth: () => Promise<string | null>
    encryptCallback: (plain: any) => Promise<any>
    decryptCallback: (encrypted: any) => Promise<any>
    deviceId: string
    checkResult?: true
}
export default (params: ClientParams) => ({
    PubNewmapping: async (request: Types.PubNewMappingRequest): Promise<ResultError | ({ status: 'OK' })> => {
        const auth = await params.retrievePubAuth()
        if (auth === null) throw new Error('retrievePubAuth() returned null')
        let finalRoute = '/api/pub/new/mapping'
        const { data } = await axios.post(params.baseUrl + finalRoute, request, { headers: { 'authorization': auth } })
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            return data
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    WalletGetVanityName: async (request: Types.WalletGetVanityNameRequest): Promise<ResultError | ({ status: 'OK' }& Types.WalletGetVanityNameResponse)> => {
        const auth = await params.retrieveWalletAuth()
        if (auth === null) throw new Error('retrieveWalletAuth() returned null')
        let finalRoute = '/api/pub/get/mapping'
        const { data } = await axios.post(params.baseUrl + finalRoute, request, { headers: { 'authorization': auth } })
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.WalletGetVanityNameResponseValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
})
