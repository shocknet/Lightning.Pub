import jwt from 'jsonwebtoken'
import Storage from '../storage/index.js'
import * as Types from '../../../proto/autogenerated/ts/types.js'

import { MainSettings } from './settings.js'
import ApplicationManager from './applicationManager.js'
export default class {
    storage: Storage
    settings: MainSettings
    applicationManager: ApplicationManager
    constructor(storage: Storage, settings: MainSettings, applicationManager: ApplicationManager) {
        this.storage = storage
        this.settings = settings
        this.applicationManager = applicationManager
    }
    SignUserToken(userId: string, appId: string, userIdentifier: string): string {
        return jwt.sign({ user_id: userId, app_id: appId, app_user_id: userIdentifier }, this.settings.jwtSecret);
    }

    DecodeUserToken(token?: string): { user_id: string, app_id: string, app_user_id: string } {
        if (!token) throw new Error("empty user token provided")
        let t = token
        if (token.startsWith("Bearer ")) {
            t = token.substring("Bearer ".length)
        }
        if (!t) throw new Error("no user token provided")
        const decoded = jwt.verify(token, this.settings.jwtSecret) as { user_id: string, app_id: string, app_user_id: string }
        if (!decoded.user_id || !decoded.app_id || !decoded.app_user_id) {
            throw new Error("the provided token is not a valid app user token token")
        }
        return decoded
    }
    async GetUserInfo(ctx: Types.UserContext): Promise<Types.UserInfo> {
        const user = await this.storage.userStorage.GetUser(ctx.user_id)
        return {
            userId: ctx.user_id,
            balance: user.balance_sats
        }
    }

    async NewInvoice(ctx: Types.UserContext, req: Types.NewInvoiceRequest): Promise<Types.NewInvoiceResponse> {
        return this.applicationManager.AddAppUserInvoice(ctx.app_id, {
            http_callback_url: "",
            invoice_req: req,
            payer_identifier: ctx.app_user_id,
            receiver_identifier: ctx.app_user_id
        })
    }

    async PayInvoice(ctx: Types.UserContext, req: Types.PayInvoiceRequest): Promise<Types.PayInvoiceResponse> {
        return this.applicationManager.PayAppUserInvoice(ctx.app_id, {
            amount: req.amount,
            invoice: req.invoice,
            user_identifier: ctx.app_user_id
        })
    }
}