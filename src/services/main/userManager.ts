import jwt from 'jsonwebtoken'
import Storage from '../storage/index.js'
import * as Types from '../../../proto/autogenerated/ts/types.js'

import { MainSettings } from './settings.js'
export default class {
    storage: Storage
    settings: MainSettings
    constructor(storage: Storage, settings: MainSettings) {
        this.storage = storage
        this.settings = settings
    }
    SignUserToken(userId: string): string {
        return jwt.sign({ userId }, this.settings.jwtSecret);
    }

    DecodeUserToken(token?: string): string {
        if (!token) throw new Error("empty user token provided")
        let t = token
        if (token.startsWith("Bearer ")) {
            t = token.substring("Bearer ".length)
        }
        if (!t) throw new Error("no user token provided")
        return (jwt.verify(token, this.settings.jwtSecret) as { userId: string }).userId
    }

    async AddBasicUser(req: Types.AddUserRequest): Promise<Types.AddUserResponse> {
        const { user } = await this.storage.userStorage.AddBasicUser(req.name, req.secret)
        return {
            userId: user.user_id,
            authToken: this.SignUserToken(user.user_id)
        }
    }
    async GetUserInfo(userId: string): Promise<Types.UserInfo> {
        const user = await this.storage.userStorage.GetUser(userId)
        return {
            userId: userId,
            balance: user.balance_sats
        }
    }
}