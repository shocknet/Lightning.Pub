import * as Types from '../../../proto/autogenerated/ts/types'
const maxEvents = 100_000
export default class Handler {
    metrics: Types.UsageMetric[] = []
    AddMetrics(newMetrics: Types.RequestMetric[]) {
        const parsed: Types.UsageMetric[] = newMetrics.map(m => ({
            rpc_name: m.rpcName,
            processed_at_nano: m.start.toString(),
            batch: m.batch,
            nostr: m.nostr,
            batch_size: m.batchSize,
            parsed_in_nano: Number(m.parse - m.start),
            auth_in_nano: Number(m.guard - m.parse),
            validate_in_nano: Number(m.validate - m.guard),
            handle_in_nano: Number(m.handle - m.validate)
        }))
        const len = this.metrics.push(...parsed)
        if (len > maxEvents) {
            this.metrics.splice(0, len - maxEvents)
        }
    }
    async GetMetrics(): Promise<Types.UsageMetrics> {
        return {
            metrics: this.metrics
        }
    }
}