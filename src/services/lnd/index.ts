//const grpc = require('@grpc/grpc-js');
import { credentials, Metadata } from '@grpc/grpc-js'
import { GrpcTransport } from "@protobuf-ts/grpc-transport";
import fs from 'fs'
import { LightningClient } from '../../../proto/lnd/rpc.client'
import { InvoicesClient } from '../../../proto/lnd/invoices.client'
import { RouterClient } from '../../../proto/lnd/router.client'
import * as Types from '../../../proto/autogenerated/ts/types'
import { GetInfoRequest, GetInfoResponse } from '../../../proto/lnd/rpc'
const lndAddr = process.env.LND_ADDRESS;
const lndCertPath = process.env.LND_CERT_PATH;
const lndMacaroonPath = process.env.LND_MACAROON_PATH;
if (!lndAddr || !lndCertPath || !lndMacaroonPath) {
    throw new Error(`Something missing from ADDR/TLS/MACAROON`);
}
const lndCert = fs.readFileSync(lndCertPath);
const macaroon = fs.readFileSync(lndMacaroonPath).toString('hex');
const sslCreds = credentials.createSsl(lndCert);
const macaroonCreds = credentials.createFromMetadataGenerator(
    function (args: any, callback: any) {
        let metadata = new Metadata();
        metadata.add('macaroon', macaroon);
        callback(null, metadata);
    },
);
const creds = credentials.combineChannelCredentials(
    sslCreds,
    macaroonCreds,
);
const transport = new GrpcTransport({ host: lndAddr, channelCredentials: creds })
const lightning = new LightningClient(transport)
const invoices = new InvoicesClient(transport)
const router = new RouterClient(transport)
const DefaultMetadata = (deadline = 10 * 1000) => ({ deadline: Date.now() + deadline })

export default {
    getInfo: async (): Promise<GetInfoResponse> => (await lightning.getInfo({}, DefaultMetadata())).response
}


