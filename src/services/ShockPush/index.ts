import { nip98, UnsignedEvent, finalizeEvent } from 'nostr-tools'
import { bytesToHex } from '@noble/hashes/utils'
import { sha256 } from '@noble/hashes/sha256'
import { base64 } from '@scure/base';
import NewClient, { ClientParams } from './autogenerated/http_client.js'
import { ERROR, getLogger } from '../helpers/logger.js'
const utf8Encoder = new TextEncoder()
export type PushPair = { pubkey: string, privateKey: string }
const nip98Kind = 27235
export class ShockPush {
    private client: ReturnType<typeof NewClient>
    private logger: ReturnType<typeof getLogger>
    private serviceBaseUrl: string
    private pair: PushPair
    constructor(shockPushUrl: string, pair: PushPair) {
        this.logger = getLogger({ component: 'shockPush' })
        this.serviceBaseUrl = shockPushUrl
        this.pair = pair
        this.client = NewClient({
            baseUrl: this.serviceBaseUrl,
            retrieveAdminAuth: async () => { throw new Error('not implemented') },
            retrieveGuestAuth: async () => (''),
            retrieveNostrAppAuth: async (rawBody, reqUrl, httpMethod) => this.generateNip98Header(rawBody, reqUrl, httpMethod),
            encryptCallback: () => { throw new Error('not implemented') },
            decryptCallback: () => { throw new Error('not implemented') },
            deviceId: '',
        })
    }

    private generateNip98Header = async (raw: string, url: string, method: string) => {
        const tags = [
            ["u", `${this.serviceBaseUrl}${url}`],
            ["method", method.toUpperCase()]
        ];

        if (raw !== "") {
            tags.push(["payload", bytesToHex(sha256(utf8Encoder.encode(raw)))]);
        }

        const npub = this.pair.pubkey

        const event: UnsignedEvent = {
            created_at: Math.round(Date.now() / 1000),
            pubkey: npub,
            content: "",
            kind: nip98Kind,
            tags
        }

        const signed = finalizeEvent(event, Buffer.from(this.pair.privateKey, 'hex'))
        const nip98Header = "Nostr " + base64.encode(utf8Encoder.encode(JSON.stringify(signed)));
        return nip98Header
    }

    SendNotification = async (message: string, messagingToken: string) => {
        const res = await this.client.SendNotification({ recipient_registration_tokens: [messagingToken], data: message })
        if (res.status !== 'OK') {
            this.logger(ERROR, `failed to send notification: ${res.status}`)
        }
    }
}