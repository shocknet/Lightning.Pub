import Main from "./services/main/index.js"
import Nostr from "./services/nostr/index.js"
import { NostrSettings } from "./services/nostr/handler.js"
import * as Types from '../proto/autogenerated/ts/types.js'

const handledRequests: string[] = [] // TODO: - big memory leak here, add TTL
type EventRequest = {
    requestId: string
    method: string
    params: Record<string, string>
    body: any
    query: Record<string, string>
}

export default (serverMethods: Types.ServerMethods, mainHandler: Main, nostrSettings: NostrSettings): Nostr => {
    // TODO: - move to codegen
    const nostr = new Nostr(nostrSettings,
        async (event) => {
            if (!nostrSettings.allowedPubs.includes(event.pub)) {
                console.log("nostr pub not allowed")
                return
            }
            let nostrUser = await mainHandler.storage.FindNostrUser(event.pub)
            if (!nostrUser) {

                nostrUser = await mainHandler.storage.AddNostrUser(event.pub)
            }
            let j: EventRequest
            try {
                j = JSON.parse(event.content)
            } catch {
                console.error("invalid json event received", event.content)
                return
            }
            if (handledRequests.includes(j.requestId)) {
                console.log("request already handled")
                return
            }
            handledRequests.push(j.requestId)
            switch (j.method) {
                case '/api/user/chain/new':
                    const error = Types.NewAddressRequestValidate(j.body)
                    if (error !== null) {
                        console.error("invalid request from", event.pub, j)// TODO: dont dox
                        return // TODO: respond 
                    }
                    if (!serverMethods.NewAddress) {
                        throw new Error("unimplemented NewInvoice")
                    }
                    const res = await serverMethods.NewAddress({ user_id: nostrUser.user.user_id }, j.body)
                    nostr.Send(event.pub, JSON.stringify({ ...res, requestId: j.requestId }))
            }
        })
    return nostr
}