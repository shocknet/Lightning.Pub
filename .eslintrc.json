{
  "extends": ["eslint:all", "prettier", "plugin:mocha/recommended"],
  "plugins": ["prettier", "mocha", "babel"],
  "rules": {
    "prettier/prettier": "error",
    "strict": "off",

    "mocha/no-mocha-arrows": "off",

    "max-statements-per-line": "off",

    "no-empty-function": "off",

    "no-console": "off",

    "max-statements": "off",

    "global-require": "off",

    "new-cap": "off",

    "one-var": "off",

    "max-lines-per-function": "off",

    "no-underscore-dangle": "off",

    "no-implicit-coercion": "off",

    "no-magic-numbers": "off",

    "no-negated-condition": "off",

    "capitalized-comments": "off",

    "max-params": "off",

    "multiline-comment-style": "off",

    "spaced-comment": "off",

    "no-inline-comments": "off",

    "sort-keys": "off",

    "max-lines": "off",

    "prefer-template": "off",

    "callback-return": "off",

    "no-ternary": "off",

    "no-invalid-this": "off",

    "babel/no-invalid-this": "error",

    "complexity": "off",

    "yoda": "off",

    "prefer-promise-reject-errors": "off",

    "camelcase": "off",

    "consistent-return": "off",

    "no-shadow": "off",
    // We're usually throwing objects throughout the API to allow for more detailed error messages
    "no-throw-literal": "off",

    // lightning has sync methods and this rule bans them
    "no-sync": "off",

    "id-length": "off",

    // typescript does this
    "no-unused-vars": "off",

    // https://github.com/prettier/eslint-config-prettier/issues/132
    "line-comment-position": "off",

    // if someone does this it's probably intentional
    "no-useless-concat": "off",

    "no-plusplus": "off",

    "no-undefined": "off",

    "no-process-env": "off",

    // I am now convinced TODO comments closer to the relevant code are better
    // than GH issues. Especially when it only concerns a single function /
    // routine.
    "no-warning-comments": "off",

    // broken
    "sort-imports": "off"
  },
  "parser": "babel-eslint",
  "env": {
    "node": true,
    "es6": true
  }
}
